//Container version

virtual bool SearchableContainer::IsMember (Object const& obj) const
{
	if Find(obj) != NullObject
		return true
	return false
}

virtual SearchableContainer::Object& Find (Object const& obj) const
{
	found = NullObject
	for each object in Container
		if obj == ContainerObject
			found = CointainerObject
			break
	return found
}

//Iterator version
virtual bool SearchableContainer::IsMember (Object const& obj) const
{
	if Find(obj) != NullObject
		return true
	return false
}

virtual SearchableContainer::Object& Find (Object const& obj) const
{
	found = NullObject
	Iterator& i = NewIterator ()
	while (!i.IsDone ()) {
	    if i == obj 
	    	found = i
    	++i
	}
	delete &i;	
	return found
}
